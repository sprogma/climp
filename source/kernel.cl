
#define PARALLEL_CHANELS 2048

struct __attribute__ ((packed)) note
{
    int tool;
    int start;
    int end;
    float frequency;
    float volume;
};


float random(float time) {
    float _;
    return fract(sin(time * 78.233) * 43758.5453123, &_);
}

float Electro_Soprano(float s, struct note *note, float rnd){ 
float freq[] = {
    1.0,
    0.5,
    0.2,
    0.05,
    0.1,
    0.0025,
    0.001
};
float v = note->volume, k = 1.0f - (float)(s - note->start) / (float)(note->end - note->start);
v *= fmax(0.01f, k);

float res = 0.0, dr;
for (int fqid = 0; fqid < sizeof(freq) / sizeof(*freq); ++fqid)
{
    float f = note->frequency * (fqid + 1);
    float fv = freq[fqid];
    dr = sin(s * f / 44100.0f * 0.5 * 3.1415926 * 2.0);
    res += fv*v*dr;
}
return res;
     }

float Violin(float s, struct note *note, float rnd){ 
float freq[] = {
    0.2,
    0.6,
    0.05,
    0.8,
    0.05,
    0.025,
    0.0125,
    0.5,
    0.0,
    0.026,
    0.0,
    0.1,
    0.0,
    0.015,
    0.0,
    0.4,
};
float v = note->volume, k = 1.0f - (float)(s - note->start) / (float)(note->end - note->start);
v *= fmax(0.01f, k);

float res = 0.0, dr;
for (int fqid = 0; fqid < sizeof(freq) / sizeof(*freq); ++fqid)
{
    float f = note->frequency * (fqid + 1) * 0.25;
    float fv = freq[fqid];
    dr = sin(s * f / 44100.0f * 0.5 * 3.1415926 * 2.0);
    res += fv*v*dr;
}
return res;
     }

float Soprano(float s, struct note *note, float rnd){ 
    float frq[] = {
        1.0,6.0,5.0,3.9964664310954063,4.0,2.0,9.0,10.0,3.0,4.003533568904594,8.0,12.0,7.0,20.0,25.0,22.0,23.0,24.0,58.0,33.0,29.0,35.0,26.000000000000004,54.00000000000001,30.0,57.00000000000001,14.0,55.00000000000001,42.0,28.0,53.00000000000001,18.0,60.0,47.0,11.0,56.0,45.0,38.0,51.0,48.0,50.0,37.0,62.0,61.00000000000001,40.0,27.000000000000004,32.0,21.0,59.00000000000001,49.0,39.0,41.0,19.0,31.0,13.000000000000002,63.00000000000001,34.0,46.0,52.00000000000001,15.0,16.0,44.0,17.0,36.0,43.0
    };
    float phs[] = {
        1.4501886382108642,-0.3547159185605787,-1.232261400584307,0.47278703740278727,2.550022402105813,2.559885534573797,0.905229351215513,1.2693626087861083,1.2002496436829195,-1.9153326191682265,-2.134574552581397,-2.8419605875492207,-0.9641273204466279,-0.046296084319373286,1.6450546503272971,0.56073260140497,2.441392343407352,2.4194654341356685,-1.0935426491505307,-1.7938751541718487,0.8179412318786795,0.4490135151054541,0.7512274451682782,-2.2084995124170064,-2.5170635030327926,2.8938174837887836,0.8621017536005892,-0.9365225928991979,-0.4864185602830766,-0.24476418634968772,1.814300122572583,-1.198165296333542,-0.5417217381464372,2.305315171836916,1.588394624255954,-2.203991116869416,1.3093737421760319,1.4544646496216425,1.6915716879654483,3.1193163168737574,-1.6768965323031222,-1.853975205149076,-2.1329812641176376,0.3955049694624787,2.317581015921571,-1.3072434467118734,-1.2669512995698198,-1.543106393970299,2.6296529929412524,-1.0735790662202491,0.39114469003429925,0.13995581385788955,3.089637493666911,2.6498973700560136,-3.0745467809529075,2.424993282182873,1.9601584588796601,2.152491692055298,-1.9104903359584393,2.413056750339734,3.087408454936978,-1.525458295684912,-1.6737232996850373,0.9697286711717299,-0.6298037816758755
    };
    float amp[] = {
        0.7362837471482903,0.06586334752610942,0.05198351893913466,0.02170533313555922,0.019671533089782697,0.01727185004176515,0.015292556102569127,0.012568840064983055,0.009231838100098816,0.008212876447407978,0.004676837247961827,0.0037453194389388106,0.002261910020282473,0.0018893616741805055,0.0015781733300714762,0.0015537590529767485,0.001480285092572344,0.0014718606342269415,0.001310144050123044,0.001187078630019813,0.0010483078977811435,0.00102732623220975,0.0010075518810642066,0.0009911390778925004,0.0008803754637479454,0.0008523996193192635,0.0007272384472405292,0.000709965599677109,0.0006926511883629162,0.0006648385886288237,0.0006220963083389539,0.0006050573154251233,0.0005971202117334739,0.0005792523174828357,0.0005488564446570998,0.0005485806080759507,0.0005368176003661636,0.0005178634045949571,0.0004784327911527631,0.0004585263519473533,0.0004378650821086538,0.0004333826374738642,0.0004151329911253437,0.0004044973242521919,0.00039210168457768084,0.00038000412160414833,0.0003618588795306776,0.0003253403014573758,0.00029447865626709864,0.0002923873680239426,0.0002681498423236225,0.0002650081692224914,0.0002557831629490885,0.00024880088896043795,0.00024208946437453413,0.00023784539085320956,0.00022086642962422198,0.00021407413331735216,0.00020890429734266125,0.00017161066681882178,0.0001544821411934319,0.00015085529417134452,0.00013988213026046002,0.00012773429121554434,2.2297534198586442e-05
    };
    
    float v = note->volume, k = 1.0f - (float)(s - note->start) / (float)(note->end - note->start);
    v *= fmax(0.01f, k);
    
    float res = 0.0, dr;
    for (int i = 0; i < 65; ++i)
    {
        float f = note->frequency * (frq[i]);
        float fv = amp[i];
        float x_pos = s * f / 44100.0f * 0.5 * 3.1415926 * 2.0 + phs[i];
        float sin_value = sin(x_pos);
        dr = 
        (3 + 100.0) * atan(5.0*sinh(0.25*sin_value)) / (3.141592653589793 + 100.0 * fabs(sin_value))
    ;
        res += fv*v*dr;
    }
    return res;
         }

float Cello(float s, struct note *note, float rnd){ 
float freq[] = {
    0.5,
    0.6,
    0.05,
    0.7,
    0.05,
    0.25,
    0.15,
    0.8,
    0.015,
    0.005,
    0.015,
    0.1,
    0.015,
    0.005,
    0.015,
    0.6,
};
float v = note->volume, k = 1.0f - (float)(s - note->start) / (float)(note->end - note->start);
v *= fmax(0.01f, k);

float res = 0.0, dr;
for (int fqid = 0; fqid < sizeof(freq) / sizeof(*freq); ++fqid)
{
    float f = note->frequency * (fqid + 1) * 0.125;
    float fv = freq[fqid];
    dr = sin(s * f / 44100.0f * 0.5 * 3.1415926 * 2.0);
    res += fv*v*(smoothstep(-0.2, 0.2, dr)*2.0-1.0);
}
return res;
     }

float Bass(float s, struct note *note, float rnd){ 
    float frq[] = {
        0.25,1.0,1.25,0.5,0.75,0.125,1.75,2.0,1.9994292237442923,2.25,1.5,2.000570776255708,2.75,3.0,3.5,3.25,4.0,4.25,4.000570776255708,4.5,3.75,0.04166666666666667,5.25,3.9971461187214614,5.5,3.9994292237442925,3.9977168949771693,0.05479452054794521,5.75,3.9982876712328768,0.16666666666666669,3.9988584474885847,0.6666666666666667,3.9965753424657535,4.001141552511416,0.33333333333333337,4.75,6.0,4.002853881278539,1.3333333333333335,6.25,6.75,4.0034246575342465,6.5,0.5713470319634704,5.0,4.003995433789955,7.0,7.5,4.002283105022832,3.9960045662100456,7.25,7.75,0.08333333333333334,4.001712328767123,9.25,8.0,9.0,8.75,2.5,8.5,8.25,9.75,12.25,10.5,11.75,11.5,12.0,11.0,11.25,9.5,10.25,10.75,10.0,12.5,20.25,17.25,19.75,17.0,15.25,18.5,16.25,19.0,14.0,15.75,13.5,16.5,19.25,18.25,14.25,21.0,15.5,17.5,18.0,19.5,20.0,12.75,18.75,13.0,13.25,15.0,16.0,14.5,20.5,13.75,14.75,17.75,20.75,16.75
    };
    float phs[] = {
        -1.0861174871965873,-0.25699573615692023,2.067447445273796,2.3610660380602346,-2.5943551526375117,1.9315079649565179,-0.2993286362356758,1.6955668098311807,-1.3033809674885235,-3.0906314118609455,3.1055711945337143,-1.7654905980246602,0.3860945603967618,3.113271560501619,0.008342533837528207,-1.8044286721948883,-2.0306972834896286,-0.4143237903766638,1.2733822091100204,1.348842854860581,1.8452813372794314,2.783323659265575,0.3075403697074569,2.818894972741998,2.4270921271371493,0.9711395550636506,-0.24673922567360843,0.05381813164948011,-2.2460052072580297,-2.638367675742312,-1.8220959866652837,1.1358264769492723,0.5077489577380929,-0.46209618727171414,-1.302868347846637,-0.8842409107144704,2.6406966223009674,0.1797592262234835,2.60038587972369,2.6338722196311544,1.4328142036281475,-0.6399343677097402,-0.9067044908050441,-2.960364404370958,0.10333302754396219,-2.0945584427181636,2.880837037364916,0.7582700409168143,-1.1209288833495414,-0.3292173002426444,-3.103087454939482,3.087976142815556,0.07992462278149458,2.7263168548906593,-2.825712801474005,-2.403479529595622,2.045678303413452,2.5995893754561585,0.2625372065049368,-2.340125112077672,-0.8291449022299106,2.9514694085975655,0.7000224086793604,0.9427606685432424,1.1615904340555623,-2.9670739368158587,1.4673119003241823,-0.5590457358954937,-1.8397365699696426,-0.6817287704031888,-0.31946019351936844,-0.5335856263384313,-1.1301276549797676,2.164354610282052,2.6534567395176296,-2.9461077057030858,1.9227771648216119,0.2747237107593484,-2.755158574135006,-0.2936521570327965,0.6743749542569655,-2.903685709403313,-2.052662382118026,2.585625830420281,-1.135657884250405,1.367365785990384,-1.6360717010393315,2.442279862690804,-0.5070344947693147,-0.2722953471900852,-0.41565498107460985,-0.9780401049648005,-1.0142302487378365,-2.925854430528086,0.04405437601903897,2.858892309975875,1.3295176869333445,1.8791377416767228,0.32697988519494675,3.0544678280880695,0.9937425797168215,-2.5122449942130767,0.6392528643210218,1.9892800748105866,0.3012089655278455,-0.1908577069530638,0.4780677453929416,2.0393722168538884,-1.8545764056043574
    };
    float amp[] = {
        0.8100055672803071,0.0011247203615382662,7.069675834214082e-05,0.014767434000343603,0.0007609007806007991,0.16087604645776982,3.3393280850755463e-05,2.656516697287573e-05,1.8740371850249502e-05,1.8306118394922376e-05,1.4182634975566897e-05,1.1402069004200593e-05,8.101192237560373e-06,6.204905318678339e-06,5.737009035544101e-06,5.079478041999177e-06,4.044139163593153e-06,3.1715009284818737e-06,3.0684582231655353e-06,2.5932613533011775e-06,2.2072957758265894e-06,0.005313003634218044,1.5689082514260598e-06,1.4366907006504712e-06,1.3926666455273033e-06,1.3785945542579452e-06,1.261204042398833e-06,0.0031824726594610925,8.500517016163149e-07,8.484655536150044e-07,0.0028187731374804685,7.600873888971133e-07,1.1092412679797885e-05,6.985924176883169e-07,6.931865156926563e-07,0.00014786125368011603,6.508668668745765e-07,6.293561616653843e-07,5.899592924329374e-07,5.740217404201142e-07,5.575570281344344e-07,5.350716583087172e-07,5.106877523345297e-07,4.877169588247616e-07,6.103351310956451e-06,3.9410693713517823e-07,3.7410982660690796e-07,3.398367201298457e-07,3.1210889860968127e-07,3.1085828476339134e-07,2.9012202701372056e-07,2.530032889262321e-07,2.410211470279368e-07,0.0007332573858962932,1.7099121844670873e-07,1.609296374917036e-07,1.55760445442353e-07,1.1205928995006431e-07,9.676582253713154e-08,8.549582845737215e-08,8.430624445876531e-08,6.96841415335527e-08,6.498411947111338e-08,5.2305083657129174e-08,4.802194830067619e-08,3.606027380155847e-08,3.565320126310965e-08,3.041158114916996e-08,2.1891037829685344e-08,1.9971170908117445e-08,1.9581985355914445e-08,1.8841256970511745e-08,1.8416303411986206e-08,1.7872561021257115e-08,7.715929764724274e-09,6.038291863326973e-10,4.294420651146739e-10,4.1172657702893733e-10,3.2752468604963947e-10,3.081465817096308e-10,3.076076623266358e-10,3.075714603276432e-10,2.8027600077293385e-10,2.7259884525946794e-10,2.6902045528874216e-10,2.5921082697649646e-10,2.279434370879266e-10,2.1121413466896522e-10,1.9418420730377825e-10,1.9401527793252077e-10,1.8766243014075633e-10,1.7844013478572146e-10,1.7772752921048275e-10,1.7441535988033875e-10,1.6929296274473124e-10,1.6310838133523573e-10,1.5590475866421985e-10,1.5341855819982464e-10,1.5283690228465096e-10,1.4406280613850935e-10,1.4146271017853383e-10,1.2031261201727185e-10,1.0806846078253417e-10,1.0315291280747514e-10,1.0152366988368821e-10,9.341045454739536e-11,7.740855379754475e-11,4.094309403450726e-11,2.5338325196640108e-11
    };
    
    float v = note->volume, k = 1.0f - (float)(s - note->start) / (float)(note->end - note->start);
    v *= fmax(0.01f, k);
    
    float res = 0.0, dr;
    for (int i = 0; i < 109; ++i)
    {
        float f = note->frequency * (frq[i]);
        float fv = amp[i];
        float x_pos = s * f / 44100.0f * 0.5 * 3.1415926 * 2.0 + phs[i];
        float sin_value = sin(x_pos);
        dr = 
        (3 + 100.0) * atan(5.0*sinh(0.25*sin_value)) / (3.141592653589793 + 100.0 * fabs(sin_value))
    ;
        res += fv*v*dr;
    }
    return res;
         }

float Drum(float s, struct note *note, float rnd){ 
        float dr;
        float v = note->volume, k = 1.0f - (float)(s - note->start) / (float)(note->end - note->start);
        v *= fmax(0.01f, k);
        return v * rnd;
     }



kernel void generation_kernel( __global float *dest,
                               uint dst_len,
                               __global struct note *notes,
                               uint notes_len,
                               __global int *opt,
                               uint opt_beat_samples,
                               uint opt_len
)
{
    int s = get_global_id(0);

    float rnd = random(100.0 * s / (float)dst_len) * 2.0 - 1.0;
    //printf("%f\n", rnd);

    float res = 0.0;

    // iterate from notes
    int beat = s / opt_beat_samples;
    int note = 0, n;
    while ((n = opt[beat * PARALLEL_CHANELS + note]) != -1)
    {
        if (notes[n].start <= s && s <= notes[n].end)
        {
            switch (notes[n].tool)
            {
            case 0: res += Electro_Soprano(s, notes + n, rnd); break;
case 1: res += Violin(s, notes + n, rnd); break;
case 2: res += Soprano(s, notes + n, rnd); break;
case 3: res += Cello(s, notes + n, rnd); break;
case 4: res += Bass(s, notes + n, rnd); break;
case 5: res += Drum(s, notes + n, rnd); break;

            default:
                break;
            }
        }
        note++;
    }

    dest[s] = res;
    return;
}
